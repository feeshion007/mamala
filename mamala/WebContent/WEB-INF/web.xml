<?xml version="1.0" encoding="UTF-8"?>
<web-app>
    <!-- Spring config start -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/applicationContext.xml</param-value>
    </context-param>

    <!-- spring 添加log4j 打印出日志文件-->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:conf/log4j.properties</param-value>
    </context-param>

    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>mamala.root</param-value>
    </context-param>
    <!-- 动态刷新日志级别的周期
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param> -->

    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <!-- spring 添加log4j 打印日志文件 end-->
    
    <!-- Web listener config start -->
    <listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>
    
    <!-- [1]httpSession 到期监听  by liupeng 2014-10-08 -->
    <listener>
        <listener-class>com.mamala.web.listener.UserManageSessionListener</listener-class>
    </listener>
    
    <!-- [2]Liupeng add for 在web启动后自动执行预处理功能-TBD -->
    <listener>  
        <listener-class>com.mamala.web.listener.ContextListener</listener-class>
    </listener>
    <!-- Web listener config end -->

    <!--session 超时时间-->
    <session-config>
        <session-timeout>1440</session-timeout>
    </session-config>
    
    
    <welcome-file-list>
        <welcome-file>welcome.html</welcome-file>
        <welcome-file>login.html</welcome-file>
    </welcome-file-list>

    <!--加入阿里巴巴druid的sql监控过滤器-->
<!--    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>-->
    <!--加入阿里巴巴druid的sql监控过滤器end -->

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- URL filter config start -->
    <filter>
        <filter-name>SessionFilter</filter-name>
        <filter-class>com.mamala.web.filter.LoginFilter</filter-class>
        <init-param>
            <description>
            <!-- 如果用户未登录（即在 session 中 key 为 sessionKey 的属性不存在或为空），则将请求重定向到该 url。-->
            <!-- 该 url 不包含web应用的 ContextPath。-->
            <!-- 如果不配置此参数，则在用户未登录系统的情况下，直接重定向到web应用的根路径（/）-->
            </description>
              <param-name>redirectUrl</param-name>
              <param-value>/login.html</param-value>
        </init-param>
        <init-param>
            <description>
            <!-- 不需要进行拦截的 url 的正则表达式，即：如果当前请求的 url 的 servletPath 能匹配该正则表达式，则直接放行（即使未登录系统）。-->
            <!-- 此参数的值一般为 loginServlet 和 registServlet 等。-->
            <!-- 另外，参数 redirectUrl 的值不用包含在该正则表达式中，因为 redirectUrl 对应的 url 会被自动放行。-->
            <!-- 还有一点需要说明的是，该参数的值不包含web应用的 ContextPath。 -->
            </description>
            <param-name>excepUrlRegex</param-name> 
            <param-value>(^/js/.*)|(^/img/.*)|(^/img/*/.*)|(^/css/.*)|(^/geojson/.*)|^/userManage/userLogin|^/sysAttrManage/getI18n|^/upload/svgInfo|(^/openApi/.*)|(^/welcome.html)|(^/login.html)|(^/successfulCase.html)</param-value>
            <!--<param-value>(^/js/.*)|(^/img/.*)|(^/css/.*)|(^/geojson/.*)</param-value>-->
            <!--<param-value>(^/loging.html)</param-value>-->
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>SessionFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>SessionFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--login.html-->
    <servlet-mapping>
        <servlet-name>default</servlet-name> 
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
 
    <servlet>
        <servlet-name>apiService</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/apiService-servlet.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>apiService</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>
